
Focusmotorcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000704  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039e  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  0000208f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 03 01 	call	0x206	; 0x206 <main>
  88:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
double speedToPeriod(double speed) {
	double RPS = speed / TRAVEL_PR; // revolutions per second
	double motorRPS = (RPS * PULLEY_TEETH) / MOTOR_TEETH;
	double stepFrequency = motorRPS * STEPS_PR;
	return 1/stepFrequency;
}
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  9c:	ef e6       	ldi	r30, 0x6F	; 111
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8a 60       	ori	r24, 0x0A	; 10
  ae:	80 83       	st	Z, r24
  b0:	78 94       	sei
  b2:	25 9a       	sbi	0x04, 5	; 4
  b4:	55 9a       	sbi	0x0a, 5	; 10
  b6:	56 9a       	sbi	0x0a, 6	; 10
  b8:	57 9a       	sbi	0x0a, 7	; 10
  ba:	20 98       	cbi	0x04, 0	; 4
  bc:	21 98       	cbi	0x04, 1	; 4
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <__vector_11>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepCounter>
  ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepCounter+0x1>
  f0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <stepCounter+0x2>
  f4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <stepCounter+0x3>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	a1 09       	sbc	r26, r1
  fc:	b1 09       	sbc	r27, r1
  fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 102:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 106:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 10a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepCounter>
 112:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepCounter+0x1>
 116:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <stepCounter+0x2>
 11a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <stepCounter+0x3>
 11e:	89 2b       	or	r24, r25
 120:	8a 2b       	or	r24, r26
 122:	8b 2b       	or	r24, r27
 124:	91 f4       	brne	.+36     	; 0x14a <__vector_11+0x76>
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <periodZ>
 12c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <periodZ+0x1>
 130:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <periodZ+0x2>
 134:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <periodZ+0x3>
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 148:	01 c0       	rjmp	.+2      	; 0x14c <__vector_11+0x78>
 14a:	5d 98       	cbi	0x0b, 5	; 11
 14c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timerCounter>
 150:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timerCounter+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timerCounter+0x1>
 15a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timerCounter>
 15e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timerCounter>
 162:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timerCounter+0x1>
 166:	88 38       	cpi	r24, 0x88	; 136
 168:	93 41       	sbci	r25, 0x13	; 19
 16a:	39 f4       	brne	.+14     	; 0x17a <__vector_11+0xa6>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flag10ms>
 172:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timerCounter+0x1>
 176:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timerCounter>
 17a:	95 b1       	in	r25, 0x05	; 5
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	89 27       	eor	r24, r25
 180:	85 b9       	out	0x05, r24	; 5
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <getADCValue>:

uint16_t getADCValue() {
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) |(1 << MUX2) | (1 << MUX3)); // RESET REGISTER
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 1a0:	ea e7       	ldi	r30, 0x7A	; 122
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 64       	ori	r24, 0x40	; 64
 1a8:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
 1aa:	80 81       	ld	r24, Z
 1ac:	86 fd       	sbrc	r24, 6
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <getADCValue+0x14>
	
	uint8_t low = ADCL;
 1b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	uint8_t high = ADCH;
 1b4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	return (high << 8) | low;
 1b8:	90 e0       	ldi	r25, 0x00	; 0
}
 1ba:	92 2b       	or	r25, r18
 1bc:	08 95       	ret

000001be <enableDriver>:

void enableDriver() {
	DIR_PORT &= DIR_PIN;
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 74       	andi	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	08 95       	ret

000001c6 <disableDriver>:
}
void disableDriver() {
	DIR_PORT |= DIR_PIN;
 1c6:	5e 9a       	sbi	0x0b, 6	; 11
 1c8:	08 95       	ret

000001ca <adcToSpeed>:
}

double adcToSpeed(uint16_t adcVal) {
	if (adcVal > ADC_MAX) adcVal = ADC_MAX;
	
	return MIN_SPEED + MAX_SPEED * (double) adcVal / ADC_MAX;
 1ca:	81 15       	cp	r24, r1
 1cc:	22 e0       	ldi	r18, 0x02	; 2
 1ce:	92 07       	cpc	r25, r18
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <adcToSpeed+0xc>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	bc 01       	movw	r22, r24
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 85 02 	call	0x50a	; 0x50a <__floatunsisf>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 ea       	ldi	r20, 0xA0	; 160
 1e6:	51 e4       	ldi	r21, 0x41	; 65
 1e8:	0e 94 13 03 	call	0x626	; 0x626 <__mulsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e8       	ldi	r19, 0x80	; 128
 1f0:	4f ef       	ldi	r20, 0xFF	; 255
 1f2:	53 e4       	ldi	r21, 0x43	; 67
 1f4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divsf3>
 1f8:	2d ec       	ldi	r18, 0xCD	; 205
 1fa:	3c ec       	ldi	r19, 0xCC	; 204
 1fc:	4c ec       	ldi	r20, 0xCC	; 204
 1fe:	5d e3       	ldi	r21, 0x3D	; 61
 200:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__addsf3>
} 
 204:	08 95       	ret

00000206 <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

int main(void)
{
	init();
 206:	0e 94 48 00 	call	0x90	; 0x90 <init>
    disableDriver();
 20a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <disableDriver>
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
				DIR_PORT |= DIR_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 20e:	1f ef       	ldi	r17, 0xFF	; 255
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 210:	d1 e0       	ldi	r29, 0x01	; 1
int main(void)
{
	init();
    disableDriver();
	while (1) {
		if (flag10ms) {
 212:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flag10ms>
 216:	88 23       	and	r24, r24
 218:	e1 f3       	breq	.-8      	; 0x212 <main+0xc>
			flag10ms = 0;
 21a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag10ms>
			double period = speedToPeriod(adcToSpeed(getADCValue()));
 21e:	0e 94 cb 00 	call	0x196	; 0x196 <getADCValue>
 222:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adcToSpeed>
			periodZ = (uint32_t) (period / TIMER_TICK);
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e2       	ldi	r20, 0x20	; 32
 22c:	51 e4       	ldi	r21, 0x41	; 65
 22e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divsf3>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 ea       	ldi	r20, 0xA0	; 160
 238:	52 e4       	ldi	r21, 0x42	; 66
 23a:	0e 94 13 03 	call	0x626	; 0x626 <__mulsf3>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 ea       	ldi	r20, 0xA0	; 160
 244:	51 e4       	ldi	r21, 0x41	; 65
 246:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divsf3>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	48 e4       	ldi	r20, 0x48	; 72
 250:	55 e4       	ldi	r21, 0x45	; 69
 252:	0e 94 13 03 	call	0x626	; 0x626 <__mulsf3>
 256:	9b 01       	movw	r18, r22
 258:	ac 01       	movw	r20, r24
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	9f e3       	ldi	r25, 0x3F	; 63
 262:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divsf3>
 266:	2d eb       	ldi	r18, 0xBD	; 189
 268:	37 e3       	ldi	r19, 0x37	; 55
 26a:	46 e0       	ldi	r20, 0x06	; 6
 26c:	56 e3       	ldi	r21, 0x36	; 54
 26e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__divsf3>
 272:	0e 94 56 02 	call	0x4ac	; 0x4ac <__fixunssfsi>
 276:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <periodZ>
 27a:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <periodZ+0x1>
 27e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <periodZ+0x2>
 282:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <periodZ+0x3>
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
 286:	28 9b       	sbis	0x05, 0	; 5
 288:	03 c0       	rjmp	.+6      	; 0x290 <main+0x8a>
				state = 1;
				DIR_PORT |= DIR_PIN;
 28a:	5e 9a       	sbi	0x0b, 6	; 11
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 28c:	cd 2f       	mov	r28, r29
 28e:	1e c0       	rjmp	.+60     	; 0x2cc <main+0xc6>
				DIR_PORT |= DIR_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
 290:	29 9b       	sbis	0x05, 1	; 5
 292:	27 c0       	rjmp	.+78     	; 0x2e2 <main+0xdc>
				state = -1;
				DIR_PORT &= ~DIR_PIN;
 294:	5e 98       	cbi	0x0b, 6	; 11
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
				DIR_PORT |= DIR_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 296:	c1 2f       	mov	r28, r17
 298:	19 c0       	rjmp	.+50     	; 0x2cc <main+0xc6>
			} 
			
			
			if (state != prevState) {
				if (state) {
					enableDriver();
 29a:	0e 94 df 00 	call	0x1be	; 0x1be <enableDriver>
					stepCounter = periodZ;
 29e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <periodZ>
 2a2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <periodZ+0x1>
 2a6:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <periodZ+0x2>
 2aa:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <periodZ+0x3>
 2ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 2b2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 2b6:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 2ba:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 2be:	03 c0       	rjmp	.+6      	; 0x2c6 <main+0xc0>
				} else disableDriver();
 2c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <disableDriver>
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
					enableDriver();
					stepCounter = periodZ;
				} else disableDriver();
				
			}
			prevState = state;
 2c6:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
 2ca:	a3 cf       	rjmp	.-186    	; 0x212 <main+0xc>
				state = -1;
				DIR_PORT &= ~DIR_PIN;
			} 
			
			
			if (state != prevState) {
 2cc:	2c 2f       	mov	r18, r28
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d4:	08 2e       	mov	r0, r24
 2d6:	00 0c       	add	r0, r0
 2d8:	99 0b       	sbc	r25, r25
 2da:	28 17       	cp	r18, r24
 2dc:	39 07       	cpc	r19, r25
 2de:	99 f3       	breq	.-26     	; 0x2c6 <main+0xc0>
 2e0:	dc cf       	rjmp	.-72     	; 0x29a <main+0x94>
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e6:	81 11       	cpse	r24, r1
 2e8:	eb cf       	rjmp	.-42     	; 0x2c0 <main+0xba>
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	ec cf       	rjmp	.-40     	; 0x2c6 <main+0xc0>

000002ee <__subsf3>:
 2ee:	50 58       	subi	r21, 0x80	; 128

000002f0 <__addsf3>:
 2f0:	bb 27       	eor	r27, r27
 2f2:	aa 27       	eor	r26, r26
 2f4:	0e 94 8f 01 	call	0x31e	; 0x31e <__addsf3x>
 2f8:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_round>
 2fc:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscA>
 300:	38 f0       	brcs	.+14     	; 0x310 <__addsf3+0x20>
 302:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscB>
 306:	20 f0       	brcs	.+8      	; 0x310 <__addsf3+0x20>
 308:	39 f4       	brne	.+14     	; 0x318 <__addsf3+0x28>
 30a:	9f 3f       	cpi	r25, 0xFF	; 255
 30c:	19 f4       	brne	.+6      	; 0x314 <__addsf3+0x24>
 30e:	26 f4       	brtc	.+8      	; 0x318 <__addsf3+0x28>
 310:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_nan>
 314:	0e f4       	brtc	.+2      	; 0x318 <__addsf3+0x28>
 316:	e0 95       	com	r30
 318:	e7 fb       	bst	r30, 7
 31a:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>

0000031e <__addsf3x>:
 31e:	e9 2f       	mov	r30, r25
 320:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_split3>
 324:	58 f3       	brcs	.-42     	; 0x2fc <__addsf3+0xc>
 326:	ba 17       	cp	r27, r26
 328:	62 07       	cpc	r22, r18
 32a:	73 07       	cpc	r23, r19
 32c:	84 07       	cpc	r24, r20
 32e:	95 07       	cpc	r25, r21
 330:	20 f0       	brcs	.+8      	; 0x33a <__addsf3x+0x1c>
 332:	79 f4       	brne	.+30     	; 0x352 <__addsf3x+0x34>
 334:	a6 f5       	brtc	.+104    	; 0x39e <__addsf3x+0x80>
 336:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_zero>
 33a:	0e f4       	brtc	.+2      	; 0x33e <__addsf3x+0x20>
 33c:	e0 95       	com	r30
 33e:	0b 2e       	mov	r0, r27
 340:	ba 2f       	mov	r27, r26
 342:	a0 2d       	mov	r26, r0
 344:	0b 01       	movw	r0, r22
 346:	b9 01       	movw	r22, r18
 348:	90 01       	movw	r18, r0
 34a:	0c 01       	movw	r0, r24
 34c:	ca 01       	movw	r24, r20
 34e:	a0 01       	movw	r20, r0
 350:	11 24       	eor	r1, r1
 352:	ff 27       	eor	r31, r31
 354:	59 1b       	sub	r21, r25
 356:	99 f0       	breq	.+38     	; 0x37e <__addsf3x+0x60>
 358:	59 3f       	cpi	r21, 0xF9	; 249
 35a:	50 f4       	brcc	.+20     	; 0x370 <__addsf3x+0x52>
 35c:	50 3e       	cpi	r21, 0xE0	; 224
 35e:	68 f1       	brcs	.+90     	; 0x3ba <__addsf3x+0x9c>
 360:	1a 16       	cp	r1, r26
 362:	f0 40       	sbci	r31, 0x00	; 0
 364:	a2 2f       	mov	r26, r18
 366:	23 2f       	mov	r18, r19
 368:	34 2f       	mov	r19, r20
 36a:	44 27       	eor	r20, r20
 36c:	58 5f       	subi	r21, 0xF8	; 248
 36e:	f3 cf       	rjmp	.-26     	; 0x356 <__addsf3x+0x38>
 370:	46 95       	lsr	r20
 372:	37 95       	ror	r19
 374:	27 95       	ror	r18
 376:	a7 95       	ror	r26
 378:	f0 40       	sbci	r31, 0x00	; 0
 37a:	53 95       	inc	r21
 37c:	c9 f7       	brne	.-14     	; 0x370 <__addsf3x+0x52>
 37e:	7e f4       	brtc	.+30     	; 0x39e <__addsf3x+0x80>
 380:	1f 16       	cp	r1, r31
 382:	ba 0b       	sbc	r27, r26
 384:	62 0b       	sbc	r22, r18
 386:	73 0b       	sbc	r23, r19
 388:	84 0b       	sbc	r24, r20
 38a:	ba f0       	brmi	.+46     	; 0x3ba <__addsf3x+0x9c>
 38c:	91 50       	subi	r25, 0x01	; 1
 38e:	a1 f0       	breq	.+40     	; 0x3b8 <__addsf3x+0x9a>
 390:	ff 0f       	add	r31, r31
 392:	bb 1f       	adc	r27, r27
 394:	66 1f       	adc	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	88 1f       	adc	r24, r24
 39a:	c2 f7       	brpl	.-16     	; 0x38c <__addsf3x+0x6e>
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <__addsf3x+0x9c>
 39e:	ba 0f       	add	r27, r26
 3a0:	62 1f       	adc	r22, r18
 3a2:	73 1f       	adc	r23, r19
 3a4:	84 1f       	adc	r24, r20
 3a6:	48 f4       	brcc	.+18     	; 0x3ba <__addsf3x+0x9c>
 3a8:	87 95       	ror	r24
 3aa:	77 95       	ror	r23
 3ac:	67 95       	ror	r22
 3ae:	b7 95       	ror	r27
 3b0:	f7 95       	ror	r31
 3b2:	9e 3f       	cpi	r25, 0xFE	; 254
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <__addsf3x+0x9a>
 3b6:	b0 cf       	rjmp	.-160    	; 0x318 <__addsf3+0x28>
 3b8:	93 95       	inc	r25
 3ba:	88 0f       	add	r24, r24
 3bc:	08 f0       	brcs	.+2      	; 0x3c0 <__addsf3x+0xa2>
 3be:	99 27       	eor	r25, r25
 3c0:	ee 0f       	add	r30, r30
 3c2:	97 95       	ror	r25
 3c4:	87 95       	ror	r24
 3c6:	08 95       	ret

000003c8 <__divsf3>:
 3c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divsf3x>
 3cc:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_round>
 3d0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscB>
 3d4:	58 f0       	brcs	.+22     	; 0x3ec <__divsf3+0x24>
 3d6:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscA>
 3da:	40 f0       	brcs	.+16     	; 0x3ec <__divsf3+0x24>
 3dc:	29 f4       	brne	.+10     	; 0x3e8 <__divsf3+0x20>
 3de:	5f 3f       	cpi	r21, 0xFF	; 255
 3e0:	29 f0       	breq	.+10     	; 0x3ec <__divsf3+0x24>
 3e2:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 3e6:	51 11       	cpse	r21, r1
 3e8:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 3ec:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_nan>

000003f0 <__divsf3x>:
 3f0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_split3>
 3f4:	68 f3       	brcs	.-38     	; 0x3d0 <__divsf3+0x8>

000003f6 <__divsf3_pse>:
 3f6:	99 23       	and	r25, r25
 3f8:	b1 f3       	breq	.-20     	; 0x3e6 <__divsf3+0x1e>
 3fa:	55 23       	and	r21, r21
 3fc:	91 f3       	breq	.-28     	; 0x3e2 <__divsf3+0x1a>
 3fe:	95 1b       	sub	r25, r21
 400:	55 0b       	sbc	r21, r21
 402:	bb 27       	eor	r27, r27
 404:	aa 27       	eor	r26, r26
 406:	62 17       	cp	r22, r18
 408:	73 07       	cpc	r23, r19
 40a:	84 07       	cpc	r24, r20
 40c:	38 f0       	brcs	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	9f 5f       	subi	r25, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	44 1f       	adc	r20, r20
 418:	aa 1f       	adc	r26, r26
 41a:	a9 f3       	breq	.-22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 41c:	35 d0       	rcall	.+106    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 41e:	0e 2e       	mov	r0, r30
 420:	3a f0       	brmi	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	e0 e8       	ldi	r30, 0x80	; 128
 424:	32 d0       	rcall	.+100    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 426:	91 50       	subi	r25, 0x01	; 1
 428:	50 40       	sbci	r21, 0x00	; 0
 42a:	e6 95       	lsr	r30
 42c:	00 1c       	adc	r0, r0
 42e:	ca f7       	brpl	.-14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 430:	2b d0       	rcall	.+86     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 432:	fe 2f       	mov	r31, r30
 434:	29 d0       	rcall	.+82     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	bb 1f       	adc	r27, r27
 43e:	26 17       	cp	r18, r22
 440:	37 07       	cpc	r19, r23
 442:	48 07       	cpc	r20, r24
 444:	ab 07       	cpc	r26, r27
 446:	b0 e8       	ldi	r27, 0x80	; 128
 448:	09 f0       	breq	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	bb 0b       	sbc	r27, r27
 44c:	80 2d       	mov	r24, r0
 44e:	bf 01       	movw	r22, r30
 450:	ff 27       	eor	r31, r31
 452:	93 58       	subi	r25, 0x83	; 131
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	3a f0       	brmi	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 458:	9e 3f       	cpi	r25, 0xFE	; 254
 45a:	51 05       	cpc	r21, r1
 45c:	78 f0       	brcs	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45e:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 462:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 466:	5f 3f       	cpi	r21, 0xFF	; 255
 468:	e4 f3       	brlt	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	98 3e       	cpi	r25, 0xE8	; 232
 46c:	d4 f3       	brlt	.-12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46e:	86 95       	lsr	r24
 470:	77 95       	ror	r23
 472:	67 95       	ror	r22
 474:	b7 95       	ror	r27
 476:	f7 95       	ror	r31
 478:	9f 5f       	subi	r25, 0xFF	; 255
 47a:	c9 f7       	brne	.-14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 47c:	88 0f       	add	r24, r24
 47e:	91 1d       	adc	r25, r1
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret
 488:	e1 e0       	ldi	r30, 0x01	; 1
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	bb 1f       	adc	r27, r27
 492:	62 17       	cp	r22, r18
 494:	73 07       	cpc	r23, r19
 496:	84 07       	cpc	r24, r20
 498:	ba 07       	cpc	r27, r26
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49c:	62 1b       	sub	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	ba 0b       	sbc	r27, r26
 4a4:	ee 1f       	adc	r30, r30
 4a6:	88 f7       	brcc	.-30     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 4a8:	e0 95       	com	r30
 4aa:	08 95       	ret

000004ac <__fixunssfsi>:
 4ac:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_splitA>
 4b0:	88 f0       	brcs	.+34     	; 0x4d4 <__fixunssfsi+0x28>
 4b2:	9f 57       	subi	r25, 0x7F	; 127
 4b4:	98 f0       	brcs	.+38     	; 0x4dc <__fixunssfsi+0x30>
 4b6:	b9 2f       	mov	r27, r25
 4b8:	99 27       	eor	r25, r25
 4ba:	b7 51       	subi	r27, 0x17	; 23
 4bc:	b0 f0       	brcs	.+44     	; 0x4ea <__fixunssfsi+0x3e>
 4be:	e1 f0       	breq	.+56     	; 0x4f8 <__fixunssfsi+0x4c>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	88 1f       	adc	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	1a f0       	brmi	.+6      	; 0x4d0 <__fixunssfsi+0x24>
 4ca:	ba 95       	dec	r27
 4cc:	c9 f7       	brne	.-14     	; 0x4c0 <__fixunssfsi+0x14>
 4ce:	14 c0       	rjmp	.+40     	; 0x4f8 <__fixunssfsi+0x4c>
 4d0:	b1 30       	cpi	r27, 0x01	; 1
 4d2:	91 f0       	breq	.+36     	; 0x4f8 <__fixunssfsi+0x4c>
 4d4:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_zero>
 4d8:	b1 e0       	ldi	r27, 0x01	; 1
 4da:	08 95       	ret
 4dc:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_zero>
 4e0:	67 2f       	mov	r22, r23
 4e2:	78 2f       	mov	r23, r24
 4e4:	88 27       	eor	r24, r24
 4e6:	b8 5f       	subi	r27, 0xF8	; 248
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <__fixunssfsi+0x4c>
 4ea:	b9 3f       	cpi	r27, 0xF9	; 249
 4ec:	cc f3       	brlt	.-14     	; 0x4e0 <__fixunssfsi+0x34>
 4ee:	86 95       	lsr	r24
 4f0:	77 95       	ror	r23
 4f2:	67 95       	ror	r22
 4f4:	b3 95       	inc	r27
 4f6:	d9 f7       	brne	.-10     	; 0x4ee <__fixunssfsi+0x42>
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__fixunssfsi+0x5c>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	08 95       	ret

0000050a <__floatunsisf>:
 50a:	e8 94       	clt
 50c:	09 c0       	rjmp	.+18     	; 0x520 <__floatsisf+0x12>

0000050e <__floatsisf>:
 50e:	97 fb       	bst	r25, 7
 510:	3e f4       	brtc	.+14     	; 0x520 <__floatsisf+0x12>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	99 23       	and	r25, r25
 522:	a9 f0       	breq	.+42     	; 0x54e <__floatsisf+0x40>
 524:	f9 2f       	mov	r31, r25
 526:	96 e9       	ldi	r25, 0x96	; 150
 528:	bb 27       	eor	r27, r27
 52a:	93 95       	inc	r25
 52c:	f6 95       	lsr	r31
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	f1 11       	cpse	r31, r1
 538:	f8 cf       	rjmp	.-16     	; 0x52a <__floatsisf+0x1c>
 53a:	fa f4       	brpl	.+62     	; 0x57a <__floatsisf+0x6c>
 53c:	bb 0f       	add	r27, r27
 53e:	11 f4       	brne	.+4      	; 0x544 <__floatsisf+0x36>
 540:	60 ff       	sbrs	r22, 0
 542:	1b c0       	rjmp	.+54     	; 0x57a <__floatsisf+0x6c>
 544:	6f 5f       	subi	r22, 0xFF	; 255
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	16 c0       	rjmp	.+44     	; 0x57a <__floatsisf+0x6c>
 54e:	88 23       	and	r24, r24
 550:	11 f0       	breq	.+4      	; 0x556 <__floatsisf+0x48>
 552:	96 e9       	ldi	r25, 0x96	; 150
 554:	11 c0       	rjmp	.+34     	; 0x578 <__floatsisf+0x6a>
 556:	77 23       	and	r23, r23
 558:	21 f0       	breq	.+8      	; 0x562 <__floatsisf+0x54>
 55a:	9e e8       	ldi	r25, 0x8E	; 142
 55c:	87 2f       	mov	r24, r23
 55e:	76 2f       	mov	r23, r22
 560:	05 c0       	rjmp	.+10     	; 0x56c <__floatsisf+0x5e>
 562:	66 23       	and	r22, r22
 564:	71 f0       	breq	.+28     	; 0x582 <__floatsisf+0x74>
 566:	96 e8       	ldi	r25, 0x86	; 134
 568:	86 2f       	mov	r24, r22
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	2a f0       	brmi	.+10     	; 0x57a <__floatsisf+0x6c>
 570:	9a 95       	dec	r25
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	da f7       	brpl	.-10     	; 0x570 <__floatsisf+0x62>
 57a:	88 0f       	add	r24, r24
 57c:	96 95       	lsr	r25
 57e:	87 95       	ror	r24
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__fp_inf>:
 584:	97 f9       	bld	r25, 7
 586:	9f 67       	ori	r25, 0x7F	; 127
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	08 95       	ret

00000590 <__fp_nan>:
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	08 95       	ret

00000596 <__fp_pscA>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	09 06       	cpc	r0, r25
 5a2:	08 95       	ret

000005a4 <__fp_pscB>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	14 06       	cpc	r1, r20
 5ae:	05 06       	cpc	r0, r21
 5b0:	08 95       	ret

000005b2 <__fp_round>:
 5b2:	09 2e       	mov	r0, r25
 5b4:	03 94       	inc	r0
 5b6:	00 0c       	add	r0, r0
 5b8:	11 f4       	brne	.+4      	; 0x5be <__fp_round+0xc>
 5ba:	88 23       	and	r24, r24
 5bc:	52 f0       	brmi	.+20     	; 0x5d2 <__fp_round+0x20>
 5be:	bb 0f       	add	r27, r27
 5c0:	40 f4       	brcc	.+16     	; 0x5d2 <__fp_round+0x20>
 5c2:	bf 2b       	or	r27, r31
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__fp_round+0x18>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__fp_round+0x20>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__fp_split3>:
 5d4:	57 fd       	sbrc	r21, 7
 5d6:	90 58       	subi	r25, 0x80	; 128
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <__fp_splitA+0x10>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	71 f0       	breq	.+28     	; 0x5fe <__fp_splitA+0x1a>
 5e2:	47 95       	ror	r20

000005e4 <__fp_splitA>:
 5e4:	88 0f       	add	r24, r24
 5e6:	97 fb       	bst	r25, 7
 5e8:	99 1f       	adc	r25, r25
 5ea:	61 f0       	breq	.+24     	; 0x604 <__fp_splitA+0x20>
 5ec:	9f 3f       	cpi	r25, 0xFF	; 255
 5ee:	79 f0       	breq	.+30     	; 0x60e <__fp_splitA+0x2a>
 5f0:	87 95       	ror	r24
 5f2:	08 95       	ret
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	f2 cf       	rjmp	.-28     	; 0x5e2 <__fp_split3+0xe>
 5fe:	46 95       	lsr	r20
 600:	f1 df       	rcall	.-30     	; 0x5e4 <__fp_splitA>
 602:	08 c0       	rjmp	.+16     	; 0x614 <__fp_splitA+0x30>
 604:	16 16       	cp	r1, r22
 606:	17 06       	cpc	r1, r23
 608:	18 06       	cpc	r1, r24
 60a:	99 1f       	adc	r25, r25
 60c:	f1 cf       	rjmp	.-30     	; 0x5f0 <__fp_splitA+0xc>
 60e:	86 95       	lsr	r24
 610:	71 05       	cpc	r23, r1
 612:	61 05       	cpc	r22, r1
 614:	08 94       	sec
 616:	08 95       	ret

00000618 <__fp_zero>:
 618:	e8 94       	clt

0000061a <__fp_szero>:
 61a:	bb 27       	eor	r27, r27
 61c:	66 27       	eor	r22, r22
 61e:	77 27       	eor	r23, r23
 620:	cb 01       	movw	r24, r22
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__mulsf3>:
 626:	0e 94 26 03 	call	0x64c	; 0x64c <__mulsf3x>
 62a:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_round>
 62e:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscA>
 632:	38 f0       	brcs	.+14     	; 0x642 <__mulsf3+0x1c>
 634:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscB>
 638:	20 f0       	brcs	.+8      	; 0x642 <__mulsf3+0x1c>
 63a:	95 23       	and	r25, r21
 63c:	11 f0       	breq	.+4      	; 0x642 <__mulsf3+0x1c>
 63e:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 642:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_nan>
 646:	11 24       	eor	r1, r1
 648:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>

0000064c <__mulsf3x>:
 64c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_split3>
 650:	70 f3       	brcs	.-36     	; 0x62e <__mulsf3+0x8>

00000652 <__mulsf3_pse>:
 652:	95 9f       	mul	r25, r21
 654:	c1 f3       	breq	.-16     	; 0x646 <__mulsf3+0x20>
 656:	95 0f       	add	r25, r21
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	55 1f       	adc	r21, r21
 65c:	62 9f       	mul	r22, r18
 65e:	f0 01       	movw	r30, r0
 660:	72 9f       	mul	r23, r18
 662:	bb 27       	eor	r27, r27
 664:	f0 0d       	add	r31, r0
 666:	b1 1d       	adc	r27, r1
 668:	63 9f       	mul	r22, r19
 66a:	aa 27       	eor	r26, r26
 66c:	f0 0d       	add	r31, r0
 66e:	b1 1d       	adc	r27, r1
 670:	aa 1f       	adc	r26, r26
 672:	64 9f       	mul	r22, r20
 674:	66 27       	eor	r22, r22
 676:	b0 0d       	add	r27, r0
 678:	a1 1d       	adc	r26, r1
 67a:	66 1f       	adc	r22, r22
 67c:	82 9f       	mul	r24, r18
 67e:	22 27       	eor	r18, r18
 680:	b0 0d       	add	r27, r0
 682:	a1 1d       	adc	r26, r1
 684:	62 1f       	adc	r22, r18
 686:	73 9f       	mul	r23, r19
 688:	b0 0d       	add	r27, r0
 68a:	a1 1d       	adc	r26, r1
 68c:	62 1f       	adc	r22, r18
 68e:	83 9f       	mul	r24, r19
 690:	a0 0d       	add	r26, r0
 692:	61 1d       	adc	r22, r1
 694:	22 1f       	adc	r18, r18
 696:	74 9f       	mul	r23, r20
 698:	33 27       	eor	r19, r19
 69a:	a0 0d       	add	r26, r0
 69c:	61 1d       	adc	r22, r1
 69e:	23 1f       	adc	r18, r19
 6a0:	84 9f       	mul	r24, r20
 6a2:	60 0d       	add	r22, r0
 6a4:	21 1d       	adc	r18, r1
 6a6:	82 2f       	mov	r24, r18
 6a8:	76 2f       	mov	r23, r22
 6aa:	6a 2f       	mov	r22, r26
 6ac:	11 24       	eor	r1, r1
 6ae:	9f 57       	subi	r25, 0x7F	; 127
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	9a f0       	brmi	.+38     	; 0x6da <__mulsf3_pse+0x88>
 6b4:	f1 f0       	breq	.+60     	; 0x6f2 <__mulsf3_pse+0xa0>
 6b6:	88 23       	and	r24, r24
 6b8:	4a f0       	brmi	.+18     	; 0x6cc <__mulsf3_pse+0x7a>
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	bb 1f       	adc	r27, r27
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	91 50       	subi	r25, 0x01	; 1
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__mulsf3_pse+0x64>
 6cc:	9e 3f       	cpi	r25, 0xFE	; 254
 6ce:	51 05       	cpc	r21, r1
 6d0:	80 f0       	brcs	.+32     	; 0x6f2 <__mulsf3_pse+0xa0>
 6d2:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 6d6:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 6da:	5f 3f       	cpi	r21, 0xFF	; 255
 6dc:	e4 f3       	brlt	.-8      	; 0x6d6 <__mulsf3_pse+0x84>
 6de:	98 3e       	cpi	r25, 0xE8	; 232
 6e0:	d4 f3       	brlt	.-12     	; 0x6d6 <__mulsf3_pse+0x84>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f7 95       	ror	r31
 6ec:	e7 95       	ror	r30
 6ee:	9f 5f       	subi	r25, 0xFF	; 255
 6f0:	c1 f7       	brne	.-16     	; 0x6e2 <__mulsf3_pse+0x90>
 6f2:	fe 2b       	or	r31, r30
 6f4:	88 0f       	add	r24, r24
 6f6:	91 1d       	adc	r25, r1
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
