
Focusmotorcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000702  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003aa  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  88:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
double speedToPeriod(double speed) {
	double RPS = speed / TRAVEL_PR; // revolutions per second
	double motorRPS = (RPS * PULLEY_TEETH) / MOTOR_TEETH;
	double stepFrequency = motorRPS * STEPS_PR;
	return 1/stepFrequency;
}
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  9c:	ef e6       	ldi	r30, 0x6F	; 111
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8a 60       	ori	r24, 0x0A	; 10
  ae:	80 83       	st	Z, r24
  b0:	78 94       	sei
  b2:	25 9a       	sbi	0x04, 5	; 4
  b4:	55 9a       	sbi	0x0a, 5	; 10
  b6:	56 9a       	sbi	0x0a, 6	; 10
  b8:	57 9a       	sbi	0x0a, 7	; 10
  ba:	20 98       	cbi	0x04, 0	; 4
  bc:	21 98       	cbi	0x04, 1	; 4
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <__vector_11>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepCounter>
  ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepCounter+0x1>
  f0:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <stepCounter+0x2>
  f4:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <stepCounter+0x3>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	a1 09       	sbc	r26, r1
  fc:	b1 09       	sbc	r27, r1
  fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 102:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 106:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 10a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 10e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <stepCounter>
 112:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <stepCounter+0x1>
 116:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <stepCounter+0x2>
 11a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <stepCounter+0x3>
 11e:	89 2b       	or	r24, r25
 120:	8a 2b       	or	r24, r26
 122:	8b 2b       	or	r24, r27
 124:	91 f4       	brne	.+36     	; 0x14a <__vector_11+0x76>
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <periodZ>
 12c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <periodZ+0x1>
 130:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <periodZ+0x2>
 134:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <periodZ+0x3>
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 148:	01 c0       	rjmp	.+2      	; 0x14c <__vector_11+0x78>
 14a:	5d 98       	cbi	0x0b, 5	; 11
 14c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timerCounter>
 150:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timerCounter+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timerCounter+0x1>
 15a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timerCounter>
 15e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timerCounter>
 162:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timerCounter+0x1>
 166:	88 38       	cpi	r24, 0x88	; 136
 168:	93 41       	sbci	r25, 0x13	; 19
 16a:	39 f4       	brne	.+14     	; 0x17a <__vector_11+0xa6>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flag10ms>
 172:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timerCounter+0x1>
 176:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timerCounter>
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <getADCValue>:

uint16_t getADCValue() {
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) |(1 << MUX2) | (1 << MUX3)); // RESET REGISTER
 18e:	ec e7       	ldi	r30, 0x7C	; 124
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
 1a2:	80 81       	ld	r24, Z
 1a4:	86 fd       	sbrc	r24, 6
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <getADCValue+0x14>
	
	uint8_t low = ADCL;
 1a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	uint8_t high = ADCH;
 1ac:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	return (high << 8) | low;
 1b0:	90 e0       	ldi	r25, 0x00	; 0
}
 1b2:	92 2b       	or	r25, r18
 1b4:	08 95       	ret

000001b6 <enableDriver>:

void enableDriver() {
	EN_PORT &= EN_PIN;
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	80 78       	andi	r24, 0x80	; 128
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	08 95       	ret

000001be <disableDriver>:
}
void disableDriver() {
	EN_PORT |= EN_PIN;
 1be:	5f 9a       	sbi	0x0b, 7	; 11
 1c0:	08 95       	ret

000001c2 <adcToSpeed>:
}

double adcToSpeed(uint16_t adcVal) {
	if (adcVal > ADC_MAX) adcVal = ADC_MAX;
	
	return MIN_SPEED + MAX_SPEED * (double) adcVal / ADC_MAX;
 1c2:	81 15       	cp	r24, r1
 1c4:	22 e0       	ldi	r18, 0x02	; 2
 1c6:	92 07       	cpc	r25, r18
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <adcToSpeed+0xc>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	bc 01       	movw	r22, r24
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 84 02 	call	0x508	; 0x508 <__floatunsisf>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 ea       	ldi	r20, 0xA0	; 160
 1de:	51 e4       	ldi	r21, 0x41	; 65
 1e0:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e8       	ldi	r19, 0x80	; 128
 1e8:	4f ef       	ldi	r20, 0xFF	; 255
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
 1f0:	2d ec       	ldi	r18, 0xCD	; 205
 1f2:	3c ec       	ldi	r19, 0xCC	; 204
 1f4:	4c ec       	ldi	r20, 0xCC	; 204
 1f6:	5d e3       	ldi	r21, 0x3D	; 61
 1f8:	0e 94 77 01 	call	0x2ee	; 0x2ee <__addsf3>
} 
 1fc:	08 95       	ret

000001fe <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

int main(void)
{
	init();
 1fe:	0e 94 48 00 	call	0x90	; 0x90 <init>
    disableDriver();
 202:	0e 94 df 00 	call	0x1be	; 0x1be <disableDriver>
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 206:	1f ef       	ldi	r17, 0xFF	; 255
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 208:	d1 e0       	ldi	r29, 0x01	; 1
int main(void)
{
	init();
    disableDriver();
	while (1) {
		if (flag10ms) {
 20a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flag10ms>
 20e:	88 23       	and	r24, r24
 210:	e1 f3       	breq	.-8      	; 0x20a <main+0xc>
			flag10ms = 0;
 212:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag10ms>
			double period = speedToPeriod(adcToSpeed(getADCValue()));
 216:	0e 94 c7 00 	call	0x18e	; 0x18e <getADCValue>
 21a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <adcToSpeed>
			periodZ = (uint32_t) (period / TIMER_TICK);
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	51 e4       	ldi	r21, 0x41	; 65
 226:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 ea       	ldi	r20, 0xA0	; 160
 230:	52 e4       	ldi	r21, 0x42	; 66
 232:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 ea       	ldi	r20, 0xA0	; 160
 23c:	51 e4       	ldi	r21, 0x41	; 65
 23e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	48 e4       	ldi	r20, 0x48	; 72
 248:	55 e4       	ldi	r21, 0x45	; 69
 24a:	0e 94 12 03 	call	0x624	; 0x624 <__mulsf3>
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	9f e3       	ldi	r25, 0x3F	; 63
 25a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
 25e:	2c e9       	ldi	r18, 0x9C	; 156
 260:	33 e5       	ldi	r19, 0x53	; 83
 262:	49 e4       	ldi	r20, 0x49	; 73
 264:	56 e3       	ldi	r21, 0x36	; 54
 266:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__divsf3>
 26a:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fixunssfsi>
 26e:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <periodZ>
 272:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <periodZ+0x1>
 276:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <periodZ+0x2>
 27a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <periodZ+0x3>
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
 27e:	28 9b       	sbis	0x05, 0	; 5
 280:	04 c0       	rjmp	.+8      	; 0x28a <main+0x8c>
				state = 1;
				DIR_PORT |= DIR_PIN;
 282:	5e 9a       	sbi	0x0b, 6	; 11
				STATUS_LED_PORT |= STATUS_LED_PIN;
 284:	2d 9a       	sbi	0x05, 5	; 5
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 286:	cd 2f       	mov	r28, r29
 288:	20 c0       	rjmp	.+64     	; 0x2ca <main+0xcc>
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
 28a:	29 9b       	sbis	0x05, 1	; 5
 28c:	29 c0       	rjmp	.+82     	; 0x2e0 <main+0xe2>
				state = -1;
				DIR_PORT &= ~DIR_PIN;
 28e:	5e 98       	cbi	0x0b, 6	; 11
				STATUS_LED_PORT |= STATUS_LED_PIN;
 290:	2d 9a       	sbi	0x05, 5	; 5
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 292:	c1 2f       	mov	r28, r17
 294:	1a c0       	rjmp	.+52     	; 0x2ca <main+0xcc>
			} 
			
			
			if (state != prevState) {
				if (state) {
					enableDriver();
 296:	0e 94 db 00 	call	0x1b6	; 0x1b6 <enableDriver>
					stepCounter = periodZ;
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <periodZ>
 29e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <periodZ+0x1>
 2a2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <periodZ+0x2>
 2a6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <periodZ+0x3>
 2aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <stepCounter>
 2ae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <stepCounter+0x1>
 2b2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <stepCounter+0x2>
 2b6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <stepCounter+0x3>
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <main+0xc6>
				} else {
					disableDriver();
 2bc:	0e 94 df 00 	call	0x1be	; 0x1be <disableDriver>
					STATUS_LED_PORT &= ~STATUS_LED_PIN;
 2c0:	2d 98       	cbi	0x05, 5	; 5
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
					disableDriver();
					STATUS_LED_PORT &= ~STATUS_LED_PIN;
				}
				
			}
			prevState = state;
 2c4:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
 2c8:	a0 cf       	rjmp	.-192    	; 0x20a <main+0xc>
				DIR_PORT &= ~DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} 
			
			
			if (state != prevState) {
 2ca:	2c 2f       	mov	r18, r28
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d2:	08 2e       	mov	r0, r24
 2d4:	00 0c       	add	r0, r0
 2d6:	99 0b       	sbc	r25, r25
 2d8:	28 17       	cp	r18, r24
 2da:	39 07       	cpc	r19, r25
 2dc:	99 f3       	breq	.-26     	; 0x2c4 <main+0xc6>
 2de:	db cf       	rjmp	.-74     	; 0x296 <main+0x98>
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e4:	81 11       	cpse	r24, r1
 2e6:	ea cf       	rjmp	.-44     	; 0x2bc <main+0xbe>
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	ec cf       	rjmp	.-40     	; 0x2c4 <main+0xc6>

000002ec <__subsf3>:
 2ec:	50 58       	subi	r21, 0x80	; 128

000002ee <__addsf3>:
 2ee:	bb 27       	eor	r27, r27
 2f0:	aa 27       	eor	r26, r26
 2f2:	0e 94 8e 01 	call	0x31c	; 0x31c <__addsf3x>
 2f6:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>
 2fa:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_pscA>
 2fe:	38 f0       	brcs	.+14     	; 0x30e <__addsf3+0x20>
 300:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_pscB>
 304:	20 f0       	brcs	.+8      	; 0x30e <__addsf3+0x20>
 306:	39 f4       	brne	.+14     	; 0x316 <__addsf3+0x28>
 308:	9f 3f       	cpi	r25, 0xFF	; 255
 30a:	19 f4       	brne	.+6      	; 0x312 <__addsf3+0x24>
 30c:	26 f4       	brtc	.+8      	; 0x316 <__addsf3+0x28>
 30e:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_nan>
 312:	0e f4       	brtc	.+2      	; 0x316 <__addsf3+0x28>
 314:	e0 95       	com	r30
 316:	e7 fb       	bst	r30, 7
 318:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>

0000031c <__addsf3x>:
 31c:	e9 2f       	mov	r30, r25
 31e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_split3>
 322:	58 f3       	brcs	.-42     	; 0x2fa <__addsf3+0xc>
 324:	ba 17       	cp	r27, r26
 326:	62 07       	cpc	r22, r18
 328:	73 07       	cpc	r23, r19
 32a:	84 07       	cpc	r24, r20
 32c:	95 07       	cpc	r25, r21
 32e:	20 f0       	brcs	.+8      	; 0x338 <__addsf3x+0x1c>
 330:	79 f4       	brne	.+30     	; 0x350 <__addsf3x+0x34>
 332:	a6 f5       	brtc	.+104    	; 0x39c <__addsf3x+0x80>
 334:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_zero>
 338:	0e f4       	brtc	.+2      	; 0x33c <__addsf3x+0x20>
 33a:	e0 95       	com	r30
 33c:	0b 2e       	mov	r0, r27
 33e:	ba 2f       	mov	r27, r26
 340:	a0 2d       	mov	r26, r0
 342:	0b 01       	movw	r0, r22
 344:	b9 01       	movw	r22, r18
 346:	90 01       	movw	r18, r0
 348:	0c 01       	movw	r0, r24
 34a:	ca 01       	movw	r24, r20
 34c:	a0 01       	movw	r20, r0
 34e:	11 24       	eor	r1, r1
 350:	ff 27       	eor	r31, r31
 352:	59 1b       	sub	r21, r25
 354:	99 f0       	breq	.+38     	; 0x37c <__addsf3x+0x60>
 356:	59 3f       	cpi	r21, 0xF9	; 249
 358:	50 f4       	brcc	.+20     	; 0x36e <__addsf3x+0x52>
 35a:	50 3e       	cpi	r21, 0xE0	; 224
 35c:	68 f1       	brcs	.+90     	; 0x3b8 <__addsf3x+0x9c>
 35e:	1a 16       	cp	r1, r26
 360:	f0 40       	sbci	r31, 0x00	; 0
 362:	a2 2f       	mov	r26, r18
 364:	23 2f       	mov	r18, r19
 366:	34 2f       	mov	r19, r20
 368:	44 27       	eor	r20, r20
 36a:	58 5f       	subi	r21, 0xF8	; 248
 36c:	f3 cf       	rjmp	.-26     	; 0x354 <__addsf3x+0x38>
 36e:	46 95       	lsr	r20
 370:	37 95       	ror	r19
 372:	27 95       	ror	r18
 374:	a7 95       	ror	r26
 376:	f0 40       	sbci	r31, 0x00	; 0
 378:	53 95       	inc	r21
 37a:	c9 f7       	brne	.-14     	; 0x36e <__addsf3x+0x52>
 37c:	7e f4       	brtc	.+30     	; 0x39c <__addsf3x+0x80>
 37e:	1f 16       	cp	r1, r31
 380:	ba 0b       	sbc	r27, r26
 382:	62 0b       	sbc	r22, r18
 384:	73 0b       	sbc	r23, r19
 386:	84 0b       	sbc	r24, r20
 388:	ba f0       	brmi	.+46     	; 0x3b8 <__addsf3x+0x9c>
 38a:	91 50       	subi	r25, 0x01	; 1
 38c:	a1 f0       	breq	.+40     	; 0x3b6 <__addsf3x+0x9a>
 38e:	ff 0f       	add	r31, r31
 390:	bb 1f       	adc	r27, r27
 392:	66 1f       	adc	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	88 1f       	adc	r24, r24
 398:	c2 f7       	brpl	.-16     	; 0x38a <__addsf3x+0x6e>
 39a:	0e c0       	rjmp	.+28     	; 0x3b8 <__addsf3x+0x9c>
 39c:	ba 0f       	add	r27, r26
 39e:	62 1f       	adc	r22, r18
 3a0:	73 1f       	adc	r23, r19
 3a2:	84 1f       	adc	r24, r20
 3a4:	48 f4       	brcc	.+18     	; 0x3b8 <__addsf3x+0x9c>
 3a6:	87 95       	ror	r24
 3a8:	77 95       	ror	r23
 3aa:	67 95       	ror	r22
 3ac:	b7 95       	ror	r27
 3ae:	f7 95       	ror	r31
 3b0:	9e 3f       	cpi	r25, 0xFE	; 254
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__addsf3x+0x9a>
 3b4:	b0 cf       	rjmp	.-160    	; 0x316 <__addsf3+0x28>
 3b6:	93 95       	inc	r25
 3b8:	88 0f       	add	r24, r24
 3ba:	08 f0       	brcs	.+2      	; 0x3be <__addsf3x+0xa2>
 3bc:	99 27       	eor	r25, r25
 3be:	ee 0f       	add	r30, r30
 3c0:	97 95       	ror	r25
 3c2:	87 95       	ror	r24
 3c4:	08 95       	ret

000003c6 <__divsf3>:
 3c6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__divsf3x>
 3ca:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>
 3ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_pscB>
 3d2:	58 f0       	brcs	.+22     	; 0x3ea <__divsf3+0x24>
 3d4:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_pscA>
 3d8:	40 f0       	brcs	.+16     	; 0x3ea <__divsf3+0x24>
 3da:	29 f4       	brne	.+10     	; 0x3e6 <__divsf3+0x20>
 3dc:	5f 3f       	cpi	r21, 0xFF	; 255
 3de:	29 f0       	breq	.+10     	; 0x3ea <__divsf3+0x24>
 3e0:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 3e4:	51 11       	cpse	r21, r1
 3e6:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_szero>
 3ea:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_nan>

000003ee <__divsf3x>:
 3ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_split3>
 3f2:	68 f3       	brcs	.-38     	; 0x3ce <__divsf3+0x8>

000003f4 <__divsf3_pse>:
 3f4:	99 23       	and	r25, r25
 3f6:	b1 f3       	breq	.-20     	; 0x3e4 <__divsf3+0x1e>
 3f8:	55 23       	and	r21, r21
 3fa:	91 f3       	breq	.-28     	; 0x3e0 <__divsf3+0x1a>
 3fc:	95 1b       	sub	r25, r21
 3fe:	55 0b       	sbc	r21, r21
 400:	bb 27       	eor	r27, r27
 402:	aa 27       	eor	r26, r26
 404:	62 17       	cp	r22, r18
 406:	73 07       	cpc	r23, r19
 408:	84 07       	cpc	r24, r20
 40a:	38 f0       	brcs	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	9f 5f       	subi	r25, 0xFF	; 255
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	44 1f       	adc	r20, r20
 416:	aa 1f       	adc	r26, r26
 418:	a9 f3       	breq	.-22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 41a:	35 d0       	rcall	.+106    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 41c:	0e 2e       	mov	r0, r30
 41e:	3a f0       	brmi	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	e0 e8       	ldi	r30, 0x80	; 128
 422:	32 d0       	rcall	.+100    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 424:	91 50       	subi	r25, 0x01	; 1
 426:	50 40       	sbci	r21, 0x00	; 0
 428:	e6 95       	lsr	r30
 42a:	00 1c       	adc	r0, r0
 42c:	ca f7       	brpl	.-14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42e:	2b d0       	rcall	.+86     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 430:	fe 2f       	mov	r31, r30
 432:	29 d0       	rcall	.+82     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	bb 1f       	adc	r27, r27
 43c:	26 17       	cp	r18, r22
 43e:	37 07       	cpc	r19, r23
 440:	48 07       	cpc	r20, r24
 442:	ab 07       	cpc	r26, r27
 444:	b0 e8       	ldi	r27, 0x80	; 128
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	bb 0b       	sbc	r27, r27
 44a:	80 2d       	mov	r24, r0
 44c:	bf 01       	movw	r22, r30
 44e:	ff 27       	eor	r31, r31
 450:	93 58       	subi	r25, 0x83	; 131
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	3a f0       	brmi	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 456:	9e 3f       	cpi	r25, 0xFE	; 254
 458:	51 05       	cpc	r21, r1
 45a:	78 f0       	brcs	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45c:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 460:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_szero>
 464:	5f 3f       	cpi	r21, 0xFF	; 255
 466:	e4 f3       	brlt	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	98 3e       	cpi	r25, 0xE8	; 232
 46a:	d4 f3       	brlt	.-12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46c:	86 95       	lsr	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b7 95       	ror	r27
 474:	f7 95       	ror	r31
 476:	9f 5f       	subi	r25, 0xFF	; 255
 478:	c9 f7       	brne	.-14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 47a:	88 0f       	add	r24, r24
 47c:	91 1d       	adc	r25, r1
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret
 486:	e1 e0       	ldi	r30, 0x01	; 1
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	bb 1f       	adc	r27, r27
 490:	62 17       	cp	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	ba 07       	cpc	r27, r26
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	62 1b       	sub	r22, r18
 49c:	73 0b       	sbc	r23, r19
 49e:	84 0b       	sbc	r24, r20
 4a0:	ba 0b       	sbc	r27, r26
 4a2:	ee 1f       	adc	r30, r30
 4a4:	88 f7       	brcc	.-30     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 4a6:	e0 95       	com	r30
 4a8:	08 95       	ret

000004aa <__fixunssfsi>:
 4aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__fp_splitA>
 4ae:	88 f0       	brcs	.+34     	; 0x4d2 <__fixunssfsi+0x28>
 4b0:	9f 57       	subi	r25, 0x7F	; 127
 4b2:	98 f0       	brcs	.+38     	; 0x4da <__fixunssfsi+0x30>
 4b4:	b9 2f       	mov	r27, r25
 4b6:	99 27       	eor	r25, r25
 4b8:	b7 51       	subi	r27, 0x17	; 23
 4ba:	b0 f0       	brcs	.+44     	; 0x4e8 <__fixunssfsi+0x3e>
 4bc:	e1 f0       	breq	.+56     	; 0x4f6 <__fixunssfsi+0x4c>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	1a f0       	brmi	.+6      	; 0x4ce <__fixunssfsi+0x24>
 4c8:	ba 95       	dec	r27
 4ca:	c9 f7       	brne	.-14     	; 0x4be <__fixunssfsi+0x14>
 4cc:	14 c0       	rjmp	.+40     	; 0x4f6 <__fixunssfsi+0x4c>
 4ce:	b1 30       	cpi	r27, 0x01	; 1
 4d0:	91 f0       	breq	.+36     	; 0x4f6 <__fixunssfsi+0x4c>
 4d2:	0e 94 0b 03 	call	0x616	; 0x616 <__fp_zero>
 4d6:	b1 e0       	ldi	r27, 0x01	; 1
 4d8:	08 95       	ret
 4da:	0c 94 0b 03 	jmp	0x616	; 0x616 <__fp_zero>
 4de:	67 2f       	mov	r22, r23
 4e0:	78 2f       	mov	r23, r24
 4e2:	88 27       	eor	r24, r24
 4e4:	b8 5f       	subi	r27, 0xF8	; 248
 4e6:	39 f0       	breq	.+14     	; 0x4f6 <__fixunssfsi+0x4c>
 4e8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ea:	cc f3       	brlt	.-14     	; 0x4de <__fixunssfsi+0x34>
 4ec:	86 95       	lsr	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b3 95       	inc	r27
 4f4:	d9 f7       	brne	.-10     	; 0x4ec <__fixunssfsi+0x42>
 4f6:	3e f4       	brtc	.+14     	; 0x506 <__fixunssfsi+0x5c>
 4f8:	90 95       	com	r25
 4fa:	80 95       	com	r24
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	08 95       	ret

00000508 <__floatunsisf>:
 508:	e8 94       	clt
 50a:	09 c0       	rjmp	.+18     	; 0x51e <__floatsisf+0x12>

0000050c <__floatsisf>:
 50c:	97 fb       	bst	r25, 7
 50e:	3e f4       	brtc	.+14     	; 0x51e <__floatsisf+0x12>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	99 23       	and	r25, r25
 520:	a9 f0       	breq	.+42     	; 0x54c <__floatsisf+0x40>
 522:	f9 2f       	mov	r31, r25
 524:	96 e9       	ldi	r25, 0x96	; 150
 526:	bb 27       	eor	r27, r27
 528:	93 95       	inc	r25
 52a:	f6 95       	lsr	r31
 52c:	87 95       	ror	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b7 95       	ror	r27
 534:	f1 11       	cpse	r31, r1
 536:	f8 cf       	rjmp	.-16     	; 0x528 <__floatsisf+0x1c>
 538:	fa f4       	brpl	.+62     	; 0x578 <__floatsisf+0x6c>
 53a:	bb 0f       	add	r27, r27
 53c:	11 f4       	brne	.+4      	; 0x542 <__floatsisf+0x36>
 53e:	60 ff       	sbrs	r22, 0
 540:	1b c0       	rjmp	.+54     	; 0x578 <__floatsisf+0x6c>
 542:	6f 5f       	subi	r22, 0xFF	; 255
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	8f 4f       	sbci	r24, 0xFF	; 255
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	16 c0       	rjmp	.+44     	; 0x578 <__floatsisf+0x6c>
 54c:	88 23       	and	r24, r24
 54e:	11 f0       	breq	.+4      	; 0x554 <__floatsisf+0x48>
 550:	96 e9       	ldi	r25, 0x96	; 150
 552:	11 c0       	rjmp	.+34     	; 0x576 <__floatsisf+0x6a>
 554:	77 23       	and	r23, r23
 556:	21 f0       	breq	.+8      	; 0x560 <__floatsisf+0x54>
 558:	9e e8       	ldi	r25, 0x8E	; 142
 55a:	87 2f       	mov	r24, r23
 55c:	76 2f       	mov	r23, r22
 55e:	05 c0       	rjmp	.+10     	; 0x56a <__floatsisf+0x5e>
 560:	66 23       	and	r22, r22
 562:	71 f0       	breq	.+28     	; 0x580 <__floatsisf+0x74>
 564:	96 e8       	ldi	r25, 0x86	; 134
 566:	86 2f       	mov	r24, r22
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	2a f0       	brmi	.+10     	; 0x578 <__floatsisf+0x6c>
 56e:	9a 95       	dec	r25
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	da f7       	brpl	.-10     	; 0x56e <__floatsisf+0x62>
 578:	88 0f       	add	r24, r24
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret

00000582 <__fp_inf>:
 582:	97 f9       	bld	r25, 7
 584:	9f 67       	ori	r25, 0x7F	; 127
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	08 95       	ret

0000058e <__fp_nan>:
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	08 95       	ret

00000594 <__fp_pscA>:
 594:	00 24       	eor	r0, r0
 596:	0a 94       	dec	r0
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	18 06       	cpc	r1, r24
 59e:	09 06       	cpc	r0, r25
 5a0:	08 95       	ret

000005a2 <__fp_pscB>:
 5a2:	00 24       	eor	r0, r0
 5a4:	0a 94       	dec	r0
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	05 06       	cpc	r0, r21
 5ae:	08 95       	ret

000005b0 <__fp_round>:
 5b0:	09 2e       	mov	r0, r25
 5b2:	03 94       	inc	r0
 5b4:	00 0c       	add	r0, r0
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0xc>
 5b8:	88 23       	and	r24, r24
 5ba:	52 f0       	brmi	.+20     	; 0x5d0 <__fp_round+0x20>
 5bc:	bb 0f       	add	r27, r27
 5be:	40 f4       	brcc	.+16     	; 0x5d0 <__fp_round+0x20>
 5c0:	bf 2b       	or	r27, r31
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__fp_round+0x18>
 5c4:	60 ff       	sbrs	r22, 0
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__fp_round+0x20>
 5c8:	6f 5f       	subi	r22, 0xFF	; 255
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__fp_split3>:
 5d2:	57 fd       	sbrc	r21, 7
 5d4:	90 58       	subi	r25, 0x80	; 128
 5d6:	44 0f       	add	r20, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	59 f0       	breq	.+22     	; 0x5f2 <__fp_splitA+0x10>
 5dc:	5f 3f       	cpi	r21, 0xFF	; 255
 5de:	71 f0       	breq	.+28     	; 0x5fc <__fp_splitA+0x1a>
 5e0:	47 95       	ror	r20

000005e2 <__fp_splitA>:
 5e2:	88 0f       	add	r24, r24
 5e4:	97 fb       	bst	r25, 7
 5e6:	99 1f       	adc	r25, r25
 5e8:	61 f0       	breq	.+24     	; 0x602 <__fp_splitA+0x20>
 5ea:	9f 3f       	cpi	r25, 0xFF	; 255
 5ec:	79 f0       	breq	.+30     	; 0x60c <__fp_splitA+0x2a>
 5ee:	87 95       	ror	r24
 5f0:	08 95       	ret
 5f2:	12 16       	cp	r1, r18
 5f4:	13 06       	cpc	r1, r19
 5f6:	14 06       	cpc	r1, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	f2 cf       	rjmp	.-28     	; 0x5e0 <__fp_split3+0xe>
 5fc:	46 95       	lsr	r20
 5fe:	f1 df       	rcall	.-30     	; 0x5e2 <__fp_splitA>
 600:	08 c0       	rjmp	.+16     	; 0x612 <__fp_splitA+0x30>
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	99 1f       	adc	r25, r25
 60a:	f1 cf       	rjmp	.-30     	; 0x5ee <__fp_splitA+0xc>
 60c:	86 95       	lsr	r24
 60e:	71 05       	cpc	r23, r1
 610:	61 05       	cpc	r22, r1
 612:	08 94       	sec
 614:	08 95       	ret

00000616 <__fp_zero>:
 616:	e8 94       	clt

00000618 <__fp_szero>:
 618:	bb 27       	eor	r27, r27
 61a:	66 27       	eor	r22, r22
 61c:	77 27       	eor	r23, r23
 61e:	cb 01       	movw	r24, r22
 620:	97 f9       	bld	r25, 7
 622:	08 95       	ret

00000624 <__mulsf3>:
 624:	0e 94 25 03 	call	0x64a	; 0x64a <__mulsf3x>
 628:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>
 62c:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_pscA>
 630:	38 f0       	brcs	.+14     	; 0x640 <__mulsf3+0x1c>
 632:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_pscB>
 636:	20 f0       	brcs	.+8      	; 0x640 <__mulsf3+0x1c>
 638:	95 23       	and	r25, r21
 63a:	11 f0       	breq	.+4      	; 0x640 <__mulsf3+0x1c>
 63c:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 640:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_nan>
 644:	11 24       	eor	r1, r1
 646:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_szero>

0000064a <__mulsf3x>:
 64a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_split3>
 64e:	70 f3       	brcs	.-36     	; 0x62c <__mulsf3+0x8>

00000650 <__mulsf3_pse>:
 650:	95 9f       	mul	r25, r21
 652:	c1 f3       	breq	.-16     	; 0x644 <__mulsf3+0x20>
 654:	95 0f       	add	r25, r21
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	55 1f       	adc	r21, r21
 65a:	62 9f       	mul	r22, r18
 65c:	f0 01       	movw	r30, r0
 65e:	72 9f       	mul	r23, r18
 660:	bb 27       	eor	r27, r27
 662:	f0 0d       	add	r31, r0
 664:	b1 1d       	adc	r27, r1
 666:	63 9f       	mul	r22, r19
 668:	aa 27       	eor	r26, r26
 66a:	f0 0d       	add	r31, r0
 66c:	b1 1d       	adc	r27, r1
 66e:	aa 1f       	adc	r26, r26
 670:	64 9f       	mul	r22, r20
 672:	66 27       	eor	r22, r22
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	66 1f       	adc	r22, r22
 67a:	82 9f       	mul	r24, r18
 67c:	22 27       	eor	r18, r18
 67e:	b0 0d       	add	r27, r0
 680:	a1 1d       	adc	r26, r1
 682:	62 1f       	adc	r22, r18
 684:	73 9f       	mul	r23, r19
 686:	b0 0d       	add	r27, r0
 688:	a1 1d       	adc	r26, r1
 68a:	62 1f       	adc	r22, r18
 68c:	83 9f       	mul	r24, r19
 68e:	a0 0d       	add	r26, r0
 690:	61 1d       	adc	r22, r1
 692:	22 1f       	adc	r18, r18
 694:	74 9f       	mul	r23, r20
 696:	33 27       	eor	r19, r19
 698:	a0 0d       	add	r26, r0
 69a:	61 1d       	adc	r22, r1
 69c:	23 1f       	adc	r18, r19
 69e:	84 9f       	mul	r24, r20
 6a0:	60 0d       	add	r22, r0
 6a2:	21 1d       	adc	r18, r1
 6a4:	82 2f       	mov	r24, r18
 6a6:	76 2f       	mov	r23, r22
 6a8:	6a 2f       	mov	r22, r26
 6aa:	11 24       	eor	r1, r1
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	50 40       	sbci	r21, 0x00	; 0
 6b0:	9a f0       	brmi	.+38     	; 0x6d8 <__mulsf3_pse+0x88>
 6b2:	f1 f0       	breq	.+60     	; 0x6f0 <__mulsf3_pse+0xa0>
 6b4:	88 23       	and	r24, r24
 6b6:	4a f0       	brmi	.+18     	; 0x6ca <__mulsf3_pse+0x7a>
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	bb 1f       	adc	r27, r27
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	91 50       	subi	r25, 0x01	; 1
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	a9 f7       	brne	.-22     	; 0x6b4 <__mulsf3_pse+0x64>
 6ca:	9e 3f       	cpi	r25, 0xFE	; 254
 6cc:	51 05       	cpc	r21, r1
 6ce:	80 f0       	brcs	.+32     	; 0x6f0 <__mulsf3_pse+0xa0>
 6d0:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 6d4:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_szero>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	e4 f3       	brlt	.-8      	; 0x6d4 <__mulsf3_pse+0x84>
 6dc:	98 3e       	cpi	r25, 0xE8	; 232
 6de:	d4 f3       	brlt	.-12     	; 0x6d4 <__mulsf3_pse+0x84>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	f7 95       	ror	r31
 6ea:	e7 95       	ror	r30
 6ec:	9f 5f       	subi	r25, 0xFF	; 255
 6ee:	c1 f7       	brne	.-16     	; 0x6e0 <__mulsf3_pse+0x90>
 6f0:	fe 2b       	or	r31, r30
 6f2:	88 0f       	add	r24, r24
 6f4:	91 1d       	adc	r25, r1
 6f6:	96 95       	lsr	r25
 6f8:	87 95       	ror	r24
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <_exit>:
 6fe:	f8 94       	cli

00000700 <__stop_program>:
 700:	ff cf       	rjmp	.-2      	; 0x700 <__stop_program>
