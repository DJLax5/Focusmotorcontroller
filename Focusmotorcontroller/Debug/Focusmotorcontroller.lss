
Focusmotorcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b0  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  88:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
double speedToPeriod(double speed) {
	double RPS = speed / TRAVEL_PR; // revolutions per second
	double motorRPS = (RPS * PULLEY_TEETH) / MOTOR_TEETH;
	double stepFrequency = motorRPS * STEPS_PR;
	return 1/stepFrequency;
}
  90:	80 e5       	ldi	r24, 0x50	; 80
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  9c:	ef e6       	ldi	r30, 0x6F	; 111
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	89 60       	ori	r24, 0x09	; 9
  ae:	80 83       	st	Z, r24
  b0:	78 94       	sei
  b2:	25 9a       	sbi	0x04, 5	; 4
  b4:	55 9a       	sbi	0x0a, 5	; 10
  b6:	56 9a       	sbi	0x0a, 6	; 10
  b8:	57 9a       	sbi	0x0a, 7	; 10
  ba:	20 98       	cbi	0x04, 0	; 4
  bc:	21 98       	cbi	0x04, 1	; 4
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <__vector_11>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flagIsr>
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <getADCValue>:

uint16_t getADCValue() {
	ADMUX &= ~((1 << MUX0) | (1 << MUX1) |(1 << MUX2) | (1 << MUX3)); // RESET REGISTER
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
 106:	80 81       	ld	r24, Z
 108:	86 fd       	sbrc	r24, 6
 10a:	fd cf       	rjmp	.-6      	; 0x106 <getADCValue+0x14>
	
	uint8_t low = ADCL;
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high = ADCH;
 110:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return (high << 8) | low;
 114:	90 e0       	ldi	r25, 0x00	; 0
}
 116:	92 2b       	or	r25, r18
 118:	08 95       	ret

0000011a <enableDriver>:

void enableDriver() {
	EN_PORT &= ~EN_PIN;
 11a:	5f 98       	cbi	0x0b, 7	; 11
 11c:	08 95       	ret

0000011e <disableDriver>:
}
void disableDriver() {
	EN_PORT |= EN_PIN;
 11e:	5f 9a       	sbi	0x0b, 7	; 11
 120:	08 95       	ret

00000122 <adcToSpeed>:
}

double adcToSpeed(uint16_t adcVal) {
	if (adcVal > ADC_MAX) adcVal = ADC_MAX;
	
	return MIN_SPEED + MAX_SPEED * (double) adcVal / ADC_MAX;
 122:	81 15       	cp	r24, r1
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	92 07       	cpc	r25, r18
 128:	10 f0       	brcs	.+4      	; 0x12e <adcToSpeed+0xc>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	bc 01       	movw	r22, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatunsisf>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 ea       	ldi	r20, 0xA0	; 160
 13e:	51 e4       	ldi	r21, 0x41	; 65
 140:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e8       	ldi	r19, 0x80	; 128
 148:	4f ef       	ldi	r20, 0xFF	; 255
 14a:	53 e4       	ldi	r21, 0x43	; 67
 14c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 150:	2d ec       	ldi	r18, 0xCD	; 205
 152:	3c ec       	ldi	r19, 0xCC	; 204
 154:	4c ec       	ldi	r20, 0xCC	; 204
 156:	5d e3       	ldi	r21, 0x3D	; 61
 158:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__addsf3>
} 
 15c:	08 95       	ret

0000015e <main>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
}

int main(void)
{
	init();
 15e:	0e 94 48 00 	call	0x90	; 0x90 <init>
    disableDriver();
 162:	0e 94 8f 00 	call	0x11e	; 0x11e <disableDriver>
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 166:	01 e0       	ldi	r16, 0x01	; 1
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 168:	1f ef       	ldi	r17, 0xFF	; 255
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 16a:	d0 2f       	mov	r29, r16
int main(void)
{
	init();
    disableDriver();
	while (1) {
		if (flag10ms) {
 16c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag10ms>
 170:	88 23       	and	r24, r24
 172:	09 f4       	brne	.+2      	; 0x176 <main+0x18>
 174:	5b c0       	rjmp	.+182    	; 0x22c <main+0xce>
			flag10ms = 0;
 176:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag10ms>
			double period = speedToPeriod(adcToSpeed(getADCValue()));
 17a:	0e 94 79 00 	call	0xf2	; 0xf2 <getADCValue>
 17e:	0e 94 91 00 	call	0x122	; 0x122 <adcToSpeed>
			periodZ = (uint32_t) (period / TIMER_TICK);
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 ea       	ldi	r20, 0xA0	; 160
 194:	52 e4       	ldi	r21, 0x42	; 66
 196:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 ea       	ldi	r20, 0xA0	; 160
 1a0:	51 e4       	ldi	r21, 0x41	; 65
 1a2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	48 e4       	ldi	r20, 0x48	; 72
 1ac:	55 e4       	ldi	r21, 0x45	; 69
 1ae:	0e 94 09 03 	call	0x612	; 0x612 <__mulsf3>
 1b2:	9b 01       	movw	r18, r22
 1b4:	ac 01       	movw	r20, r24
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	9f e3       	ldi	r25, 0x3F	; 63
 1be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 1c2:	2c ea       	ldi	r18, 0xAC	; 172
 1c4:	35 ec       	ldi	r19, 0xC5	; 197
 1c6:	47 ea       	ldi	r20, 0xA7	; 167
 1c8:	56 e3       	ldi	r21, 0x36	; 54
 1ca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divsf3>
 1ce:	0e 94 4c 02 	call	0x498	; 0x498 <__fixunssfsi>
 1d2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <periodZ>
 1d6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <periodZ+0x1>
 1da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <periodZ+0x2>
 1de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <periodZ+0x3>
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
 1e2:	18 9b       	sbis	0x03, 0	; 3
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0x90>
				state = 1;
				DIR_PORT |= DIR_PIN;
 1e6:	5e 9a       	sbi	0x0b, 6	; 11
				STATUS_LED_PORT |= STATUS_LED_PIN;
 1e8:	2d 9a       	sbi	0x05, 5	; 5
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
 1ea:	cd 2f       	mov	r28, r29
 1ec:	64 c0       	rjmp	.+200    	; 0x2b6 <main+0x158>
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
 1ee:	19 9b       	sbis	0x03, 1	; 3
 1f0:	6e c0       	rjmp	.+220    	; 0x2ce <main+0x170>
				state = -1;
				DIR_PORT &= ~DIR_PIN;
 1f2:	5e 98       	cbi	0x0b, 6	; 11
				STATUS_LED_PORT |= STATUS_LED_PIN;
 1f4:	2d 9a       	sbi	0x05, 5	; 5
			if (SW_F_PORT & SW_F_PIN) {
				state = 1;
				DIR_PORT |= DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} else if (SW_R_PORT & SW_R_PIN) {
				state = -1;
 1f6:	c1 2f       	mov	r28, r17
 1f8:	5e c0       	rjmp	.+188    	; 0x2b6 <main+0x158>
			} 
			
			
			if (state != prevState) {
				if (state) {
					enableDriver();
 1fa:	0e 94 8d 00 	call	0x11a	; 0x11a <enableDriver>
					stepCounter = periodZ;
 1fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <periodZ>
 202:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <periodZ+0x1>
 206:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <periodZ+0x2>
 20a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <periodZ+0x3>
 20e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <stepCounter>
 212:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <stepCounter+0x1>
 216:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <stepCounter+0x2>
 21a:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <stepCounter+0x3>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <main+0xca>
				} else {
					disableDriver();
 220:	0e 94 8f 00 	call	0x11e	; 0x11e <disableDriver>
					STATUS_LED_PORT &= ~STATUS_LED_PIN;
 224:	2d 98       	cbi	0x05, 5	; 5
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 226:	c0 e0       	ldi	r28, 0x00	; 0
					disableDriver();
					STATUS_LED_PORT &= ~STATUS_LED_PIN;
				}
				
			}
			prevState = state;
 228:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
		}
		
		
		if (flagIsr) {
 22c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flagIsr>
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <main+0xd8>
 234:	9b cf       	rjmp	.-202    	; 0x16c <main+0xe>
			flagIsr = 0;	
 236:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flagIsr>
			stepCounter--;
 23a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <stepCounter>
 23e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <stepCounter+0x1>
 242:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <stepCounter+0x2>
 246:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <stepCounter+0x3>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	a1 09       	sbc	r26, r1
 24e:	b1 09       	sbc	r27, r1
 250:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <stepCounter>
 254:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <stepCounter+0x1>
 258:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <stepCounter+0x2>
 25c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <stepCounter+0x3>
			if (stepCounter == 0) {
 260:	89 2b       	or	r24, r25
 262:	8a 2b       	or	r24, r26
 264:	8b 2b       	or	r24, r27
 266:	91 f4       	brne	.+36     	; 0x28c <main+0x12e>
				STEP_PORT |= STEP_PIN;
 268:	5d 9a       	sbi	0x0b, 5	; 11
				stepCounter = periodZ;
 26a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <periodZ>
 26e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <periodZ+0x1>
 272:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <periodZ+0x2>
 276:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <periodZ+0x3>
 27a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <stepCounter>
 27e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <stepCounter+0x1>
 282:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <stepCounter+0x2>
 286:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <stepCounter+0x3>
 28a:	01 c0       	rjmp	.+2      	; 0x28e <main+0x130>
				} else {
				STEP_PORT &= ~STEP_PIN;
 28c:	5d 98       	cbi	0x0b, 5	; 11
			}
			
			timerCounter++;
 28e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timerCounter>
 292:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timerCounter+0x1>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <timerCounter+0x1>
 29c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timerCounter>
			if (timerCounter == 2000) {
 2a0:	80 3d       	cpi	r24, 0xD0	; 208
 2a2:	97 40       	sbci	r25, 0x07	; 7
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <main+0x14a>
 2a6:	62 cf       	rjmp	.-316    	; 0x16c <main+0xe>
				flag10ms = 1;
 2a8:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <flag10ms>
				timerCounter= 0;
 2ac:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timerCounter+0x1>
 2b0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timerCounter>
 2b4:	5b cf       	rjmp	.-330    	; 0x16c <main+0xe>
				DIR_PORT &= ~DIR_PIN;
				STATUS_LED_PORT |= STATUS_LED_PIN;
			} 
			
			
			if (state != prevState) {
 2b6:	2c 2f       	mov	r18, r28
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2be:	08 2e       	mov	r0, r24
 2c0:	00 0c       	add	r0, r0
 2c2:	99 0b       	sbc	r25, r25
 2c4:	28 17       	cp	r18, r24
 2c6:	39 07       	cpc	r19, r25
 2c8:	09 f4       	brne	.+2      	; 0x2cc <main+0x16e>
 2ca:	ae cf       	rjmp	.-164    	; 0x228 <main+0xca>
 2cc:	96 cf       	rjmp	.-212    	; 0x1fa <main+0x9c>
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d2:	81 11       	cpse	r24, r1
 2d4:	a5 cf       	rjmp	.-182    	; 0x220 <main+0xc2>
	while (1) {
		if (flag10ms) {
			flag10ms = 0;
			double period = speedToPeriod(adcToSpeed(getADCValue()));
			periodZ = (uint32_t) (period / TIMER_TICK);
			uint8_t state = 0;
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
 2d8:	a7 cf       	rjmp	.-178    	; 0x228 <main+0xca>

000002da <__subsf3>:
 2da:	50 58       	subi	r21, 0x80	; 128

000002dc <__addsf3>:
 2dc:	bb 27       	eor	r27, r27
 2de:	aa 27       	eor	r26, r26
 2e0:	0e 94 85 01 	call	0x30a	; 0x30a <__addsf3x>
 2e4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 2e8:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <__addsf3+0x20>
 2ee:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__addsf3+0x20>
 2f4:	39 f4       	brne	.+14     	; 0x304 <__addsf3+0x28>
 2f6:	9f 3f       	cpi	r25, 0xFF	; 255
 2f8:	19 f4       	brne	.+6      	; 0x300 <__addsf3+0x24>
 2fa:	26 f4       	brtc	.+8      	; 0x304 <__addsf3+0x28>
 2fc:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 300:	0e f4       	brtc	.+2      	; 0x304 <__addsf3+0x28>
 302:	e0 95       	com	r30
 304:	e7 fb       	bst	r30, 7
 306:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>

0000030a <__addsf3x>:
 30a:	e9 2f       	mov	r30, r25
 30c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 310:	58 f3       	brcs	.-42     	; 0x2e8 <__addsf3+0xc>
 312:	ba 17       	cp	r27, r26
 314:	62 07       	cpc	r22, r18
 316:	73 07       	cpc	r23, r19
 318:	84 07       	cpc	r24, r20
 31a:	95 07       	cpc	r25, r21
 31c:	20 f0       	brcs	.+8      	; 0x326 <__addsf3x+0x1c>
 31e:	79 f4       	brne	.+30     	; 0x33e <__addsf3x+0x34>
 320:	a6 f5       	brtc	.+104    	; 0x38a <__addsf3x+0x80>
 322:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 326:	0e f4       	brtc	.+2      	; 0x32a <__addsf3x+0x20>
 328:	e0 95       	com	r30
 32a:	0b 2e       	mov	r0, r27
 32c:	ba 2f       	mov	r27, r26
 32e:	a0 2d       	mov	r26, r0
 330:	0b 01       	movw	r0, r22
 332:	b9 01       	movw	r22, r18
 334:	90 01       	movw	r18, r0
 336:	0c 01       	movw	r0, r24
 338:	ca 01       	movw	r24, r20
 33a:	a0 01       	movw	r20, r0
 33c:	11 24       	eor	r1, r1
 33e:	ff 27       	eor	r31, r31
 340:	59 1b       	sub	r21, r25
 342:	99 f0       	breq	.+38     	; 0x36a <__addsf3x+0x60>
 344:	59 3f       	cpi	r21, 0xF9	; 249
 346:	50 f4       	brcc	.+20     	; 0x35c <__addsf3x+0x52>
 348:	50 3e       	cpi	r21, 0xE0	; 224
 34a:	68 f1       	brcs	.+90     	; 0x3a6 <__addsf3x+0x9c>
 34c:	1a 16       	cp	r1, r26
 34e:	f0 40       	sbci	r31, 0x00	; 0
 350:	a2 2f       	mov	r26, r18
 352:	23 2f       	mov	r18, r19
 354:	34 2f       	mov	r19, r20
 356:	44 27       	eor	r20, r20
 358:	58 5f       	subi	r21, 0xF8	; 248
 35a:	f3 cf       	rjmp	.-26     	; 0x342 <__addsf3x+0x38>
 35c:	46 95       	lsr	r20
 35e:	37 95       	ror	r19
 360:	27 95       	ror	r18
 362:	a7 95       	ror	r26
 364:	f0 40       	sbci	r31, 0x00	; 0
 366:	53 95       	inc	r21
 368:	c9 f7       	brne	.-14     	; 0x35c <__addsf3x+0x52>
 36a:	7e f4       	brtc	.+30     	; 0x38a <__addsf3x+0x80>
 36c:	1f 16       	cp	r1, r31
 36e:	ba 0b       	sbc	r27, r26
 370:	62 0b       	sbc	r22, r18
 372:	73 0b       	sbc	r23, r19
 374:	84 0b       	sbc	r24, r20
 376:	ba f0       	brmi	.+46     	; 0x3a6 <__addsf3x+0x9c>
 378:	91 50       	subi	r25, 0x01	; 1
 37a:	a1 f0       	breq	.+40     	; 0x3a4 <__addsf3x+0x9a>
 37c:	ff 0f       	add	r31, r31
 37e:	bb 1f       	adc	r27, r27
 380:	66 1f       	adc	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	c2 f7       	brpl	.-16     	; 0x378 <__addsf3x+0x6e>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <__addsf3x+0x9c>
 38a:	ba 0f       	add	r27, r26
 38c:	62 1f       	adc	r22, r18
 38e:	73 1f       	adc	r23, r19
 390:	84 1f       	adc	r24, r20
 392:	48 f4       	brcc	.+18     	; 0x3a6 <__addsf3x+0x9c>
 394:	87 95       	ror	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b7 95       	ror	r27
 39c:	f7 95       	ror	r31
 39e:	9e 3f       	cpi	r25, 0xFE	; 254
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <__addsf3x+0x9a>
 3a2:	b0 cf       	rjmp	.-160    	; 0x304 <__addsf3+0x28>
 3a4:	93 95       	inc	r25
 3a6:	88 0f       	add	r24, r24
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <__addsf3x+0xa2>
 3aa:	99 27       	eor	r25, r25
 3ac:	ee 0f       	add	r30, r30
 3ae:	97 95       	ror	r25
 3b0:	87 95       	ror	r24
 3b2:	08 95       	ret

000003b4 <__divsf3>:
 3b4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__divsf3x>
 3b8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 3bc:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 3c0:	58 f0       	brcs	.+22     	; 0x3d8 <__divsf3+0x24>
 3c2:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 3c6:	40 f0       	brcs	.+16     	; 0x3d8 <__divsf3+0x24>
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <__divsf3+0x20>
 3ca:	5f 3f       	cpi	r21, 0xFF	; 255
 3cc:	29 f0       	breq	.+10     	; 0x3d8 <__divsf3+0x24>
 3ce:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 3d2:	51 11       	cpse	r21, r1
 3d4:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 3d8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>

000003dc <__divsf3x>:
 3dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 3e0:	68 f3       	brcs	.-38     	; 0x3bc <__divsf3+0x8>

000003e2 <__divsf3_pse>:
 3e2:	99 23       	and	r25, r25
 3e4:	b1 f3       	breq	.-20     	; 0x3d2 <__divsf3+0x1e>
 3e6:	55 23       	and	r21, r21
 3e8:	91 f3       	breq	.-28     	; 0x3ce <__divsf3+0x1a>
 3ea:	95 1b       	sub	r25, r21
 3ec:	55 0b       	sbc	r21, r21
 3ee:	bb 27       	eor	r27, r27
 3f0:	aa 27       	eor	r26, r26
 3f2:	62 17       	cp	r22, r18
 3f4:	73 07       	cpc	r23, r19
 3f6:	84 07       	cpc	r24, r20
 3f8:	38 f0       	brcs	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	9f 5f       	subi	r25, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	44 1f       	adc	r20, r20
 404:	aa 1f       	adc	r26, r26
 406:	a9 f3       	breq	.-22     	; 0x3f2 <__divsf3_pse+0x10>
 408:	35 d0       	rcall	.+106    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 40a:	0e 2e       	mov	r0, r30
 40c:	3a f0       	brmi	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	e0 e8       	ldi	r30, 0x80	; 128
 410:	32 d0       	rcall	.+100    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 412:	91 50       	subi	r25, 0x01	; 1
 414:	50 40       	sbci	r21, 0x00	; 0
 416:	e6 95       	lsr	r30
 418:	00 1c       	adc	r0, r0
 41a:	ca f7       	brpl	.-14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 41c:	2b d0       	rcall	.+86     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 41e:	fe 2f       	mov	r31, r30
 420:	29 d0       	rcall	.+82     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	bb 1f       	adc	r27, r27
 42a:	26 17       	cp	r18, r22
 42c:	37 07       	cpc	r19, r23
 42e:	48 07       	cpc	r20, r24
 430:	ab 07       	cpc	r26, r27
 432:	b0 e8       	ldi	r27, 0x80	; 128
 434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	bb 0b       	sbc	r27, r27
 438:	80 2d       	mov	r24, r0
 43a:	bf 01       	movw	r22, r30
 43c:	ff 27       	eor	r31, r31
 43e:	93 58       	subi	r25, 0x83	; 131
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	3a f0       	brmi	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 444:	9e 3f       	cpi	r25, 0xFE	; 254
 446:	51 05       	cpc	r21, r1
 448:	78 f0       	brcs	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 44e:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 452:	5f 3f       	cpi	r21, 0xFF	; 255
 454:	e4 f3       	brlt	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	98 3e       	cpi	r25, 0xE8	; 232
 458:	d4 f3       	brlt	.-12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b7 95       	ror	r27
 462:	f7 95       	ror	r31
 464:	9f 5f       	subi	r25, 0xFF	; 255
 466:	c9 f7       	brne	.-14     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 468:	88 0f       	add	r24, r24
 46a:	91 1d       	adc	r25, r1
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret
 474:	e1 e0       	ldi	r30, 0x01	; 1
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	bb 1f       	adc	r27, r27
 47e:	62 17       	cp	r22, r18
 480:	73 07       	cpc	r23, r19
 482:	84 07       	cpc	r24, r20
 484:	ba 07       	cpc	r27, r26
 486:	20 f0       	brcs	.+8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 488:	62 1b       	sub	r22, r18
 48a:	73 0b       	sbc	r23, r19
 48c:	84 0b       	sbc	r24, r20
 48e:	ba 0b       	sbc	r27, r26
 490:	ee 1f       	adc	r30, r30
 492:	88 f7       	brcc	.-30     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 494:	e0 95       	com	r30
 496:	08 95       	ret

00000498 <__fixunssfsi>:
 498:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_splitA>
 49c:	88 f0       	brcs	.+34     	; 0x4c0 <__fixunssfsi+0x28>
 49e:	9f 57       	subi	r25, 0x7F	; 127
 4a0:	98 f0       	brcs	.+38     	; 0x4c8 <__fixunssfsi+0x30>
 4a2:	b9 2f       	mov	r27, r25
 4a4:	99 27       	eor	r25, r25
 4a6:	b7 51       	subi	r27, 0x17	; 23
 4a8:	b0 f0       	brcs	.+44     	; 0x4d6 <__fixunssfsi+0x3e>
 4aa:	e1 f0       	breq	.+56     	; 0x4e4 <__fixunssfsi+0x4c>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a f0       	brmi	.+6      	; 0x4bc <__fixunssfsi+0x24>
 4b6:	ba 95       	dec	r27
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__fixunssfsi+0x14>
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__fixunssfsi+0x4c>
 4bc:	b1 30       	cpi	r27, 0x01	; 1
 4be:	91 f0       	breq	.+36     	; 0x4e4 <__fixunssfsi+0x4c>
 4c0:	0e 94 02 03 	call	0x604	; 0x604 <__fp_zero>
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_zero>
 4cc:	67 2f       	mov	r22, r23
 4ce:	78 2f       	mov	r23, r24
 4d0:	88 27       	eor	r24, r24
 4d2:	b8 5f       	subi	r27, 0xF8	; 248
 4d4:	39 f0       	breq	.+14     	; 0x4e4 <__fixunssfsi+0x4c>
 4d6:	b9 3f       	cpi	r27, 0xF9	; 249
 4d8:	cc f3       	brlt	.-14     	; 0x4cc <__fixunssfsi+0x34>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b3 95       	inc	r27
 4e2:	d9 f7       	brne	.-10     	; 0x4da <__fixunssfsi+0x42>
 4e4:	3e f4       	brtc	.+14     	; 0x4f4 <__fixunssfsi+0x5c>
 4e6:	90 95       	com	r25
 4e8:	80 95       	com	r24
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__floatunsisf>:
 4f6:	e8 94       	clt
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__floatsisf+0x12>

000004fa <__floatsisf>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__floatsisf+0x12>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	99 23       	and	r25, r25
 50e:	a9 f0       	breq	.+42     	; 0x53a <__floatsisf+0x40>
 510:	f9 2f       	mov	r31, r25
 512:	96 e9       	ldi	r25, 0x96	; 150
 514:	bb 27       	eor	r27, r27
 516:	93 95       	inc	r25
 518:	f6 95       	lsr	r31
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f1 11       	cpse	r31, r1
 524:	f8 cf       	rjmp	.-16     	; 0x516 <__floatsisf+0x1c>
 526:	fa f4       	brpl	.+62     	; 0x566 <__floatsisf+0x6c>
 528:	bb 0f       	add	r27, r27
 52a:	11 f4       	brne	.+4      	; 0x530 <__floatsisf+0x36>
 52c:	60 ff       	sbrs	r22, 0
 52e:	1b c0       	rjmp	.+54     	; 0x566 <__floatsisf+0x6c>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	16 c0       	rjmp	.+44     	; 0x566 <__floatsisf+0x6c>
 53a:	88 23       	and	r24, r24
 53c:	11 f0       	breq	.+4      	; 0x542 <__floatsisf+0x48>
 53e:	96 e9       	ldi	r25, 0x96	; 150
 540:	11 c0       	rjmp	.+34     	; 0x564 <__floatsisf+0x6a>
 542:	77 23       	and	r23, r23
 544:	21 f0       	breq	.+8      	; 0x54e <__floatsisf+0x54>
 546:	9e e8       	ldi	r25, 0x8E	; 142
 548:	87 2f       	mov	r24, r23
 54a:	76 2f       	mov	r23, r22
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__floatsisf+0x5e>
 54e:	66 23       	and	r22, r22
 550:	71 f0       	breq	.+28     	; 0x56e <__floatsisf+0x74>
 552:	96 e8       	ldi	r25, 0x86	; 134
 554:	86 2f       	mov	r24, r22
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	2a f0       	brmi	.+10     	; 0x566 <__floatsisf+0x6c>
 55c:	9a 95       	dec	r25
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	da f7       	brpl	.-10     	; 0x55c <__floatsisf+0x62>
 566:	88 0f       	add	r24, r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_inf>:
 570:	97 f9       	bld	r25, 7
 572:	9f 67       	ori	r25, 0x7F	; 127
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	08 95       	ret

0000057c <__fp_nan>:
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	08 95       	ret

00000582 <__fp_pscA>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	09 06       	cpc	r0, r25
 58e:	08 95       	ret

00000590 <__fp_pscB>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	12 16       	cp	r1, r18
 596:	13 06       	cpc	r1, r19
 598:	14 06       	cpc	r1, r20
 59a:	05 06       	cpc	r0, r21
 59c:	08 95       	ret

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <__fp_split3>:
 5c0:	57 fd       	sbrc	r21, 7
 5c2:	90 58       	subi	r25, 0x80	; 128
 5c4:	44 0f       	add	r20, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <__fp_splitA+0x10>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__fp_splitA+0x1a>
 5ce:	47 95       	ror	r20

000005d0 <__fp_splitA>:
 5d0:	88 0f       	add	r24, r24
 5d2:	97 fb       	bst	r25, 7
 5d4:	99 1f       	adc	r25, r25
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <__fp_splitA+0x20>
 5d8:	9f 3f       	cpi	r25, 0xFF	; 255
 5da:	79 f0       	breq	.+30     	; 0x5fa <__fp_splitA+0x2a>
 5dc:	87 95       	ror	r24
 5de:	08 95       	ret
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	f2 cf       	rjmp	.-28     	; 0x5ce <__fp_split3+0xe>
 5ea:	46 95       	lsr	r20
 5ec:	f1 df       	rcall	.-30     	; 0x5d0 <__fp_splitA>
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__fp_splitA+0x30>
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	18 06       	cpc	r1, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	f1 cf       	rjmp	.-30     	; 0x5dc <__fp_splitA+0xc>
 5fa:	86 95       	lsr	r24
 5fc:	71 05       	cpc	r23, r1
 5fe:	61 05       	cpc	r22, r1
 600:	08 94       	sec
 602:	08 95       	ret

00000604 <__fp_zero>:
 604:	e8 94       	clt

00000606 <__fp_szero>:
 606:	bb 27       	eor	r27, r27
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	cb 01       	movw	r24, r22
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__mulsf3>:
 612:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3x>
 616:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>
 61a:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscA>
 61e:	38 f0       	brcs	.+14     	; 0x62e <__mulsf3+0x1c>
 620:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscB>
 624:	20 f0       	brcs	.+8      	; 0x62e <__mulsf3+0x1c>
 626:	95 23       	and	r25, r21
 628:	11 f0       	breq	.+4      	; 0x62e <__mulsf3+0x1c>
 62a:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 62e:	0c 94 be 02 	jmp	0x57c	; 0x57c <__fp_nan>
 632:	11 24       	eor	r1, r1
 634:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>

00000638 <__mulsf3x>:
 638:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_split3>
 63c:	70 f3       	brcs	.-36     	; 0x61a <__mulsf3+0x8>

0000063e <__mulsf3_pse>:
 63e:	95 9f       	mul	r25, r21
 640:	c1 f3       	breq	.-16     	; 0x632 <__mulsf3+0x20>
 642:	95 0f       	add	r25, r21
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	55 1f       	adc	r21, r21
 648:	62 9f       	mul	r22, r18
 64a:	f0 01       	movw	r30, r0
 64c:	72 9f       	mul	r23, r18
 64e:	bb 27       	eor	r27, r27
 650:	f0 0d       	add	r31, r0
 652:	b1 1d       	adc	r27, r1
 654:	63 9f       	mul	r22, r19
 656:	aa 27       	eor	r26, r26
 658:	f0 0d       	add	r31, r0
 65a:	b1 1d       	adc	r27, r1
 65c:	aa 1f       	adc	r26, r26
 65e:	64 9f       	mul	r22, r20
 660:	66 27       	eor	r22, r22
 662:	b0 0d       	add	r27, r0
 664:	a1 1d       	adc	r26, r1
 666:	66 1f       	adc	r22, r22
 668:	82 9f       	mul	r24, r18
 66a:	22 27       	eor	r18, r18
 66c:	b0 0d       	add	r27, r0
 66e:	a1 1d       	adc	r26, r1
 670:	62 1f       	adc	r22, r18
 672:	73 9f       	mul	r23, r19
 674:	b0 0d       	add	r27, r0
 676:	a1 1d       	adc	r26, r1
 678:	62 1f       	adc	r22, r18
 67a:	83 9f       	mul	r24, r19
 67c:	a0 0d       	add	r26, r0
 67e:	61 1d       	adc	r22, r1
 680:	22 1f       	adc	r18, r18
 682:	74 9f       	mul	r23, r20
 684:	33 27       	eor	r19, r19
 686:	a0 0d       	add	r26, r0
 688:	61 1d       	adc	r22, r1
 68a:	23 1f       	adc	r18, r19
 68c:	84 9f       	mul	r24, r20
 68e:	60 0d       	add	r22, r0
 690:	21 1d       	adc	r18, r1
 692:	82 2f       	mov	r24, r18
 694:	76 2f       	mov	r23, r22
 696:	6a 2f       	mov	r22, r26
 698:	11 24       	eor	r1, r1
 69a:	9f 57       	subi	r25, 0x7F	; 127
 69c:	50 40       	sbci	r21, 0x00	; 0
 69e:	9a f0       	brmi	.+38     	; 0x6c6 <__mulsf3_pse+0x88>
 6a0:	f1 f0       	breq	.+60     	; 0x6de <__mulsf3_pse+0xa0>
 6a2:	88 23       	and	r24, r24
 6a4:	4a f0       	brmi	.+18     	; 0x6b8 <__mulsf3_pse+0x7a>
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	bb 1f       	adc	r27, r27
 6ac:	66 1f       	adc	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	a9 f7       	brne	.-22     	; 0x6a2 <__mulsf3_pse+0x64>
 6b8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ba:	51 05       	cpc	r21, r1
 6bc:	80 f0       	brcs	.+32     	; 0x6de <__mulsf3_pse+0xa0>
 6be:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_inf>
 6c2:	0c 94 03 03 	jmp	0x606	; 0x606 <__fp_szero>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	e4 f3       	brlt	.-8      	; 0x6c2 <__mulsf3_pse+0x84>
 6ca:	98 3e       	cpi	r25, 0xE8	; 232
 6cc:	d4 f3       	brlt	.-12     	; 0x6c2 <__mulsf3_pse+0x84>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f7 95       	ror	r31
 6d8:	e7 95       	ror	r30
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	c1 f7       	brne	.-16     	; 0x6ce <__mulsf3_pse+0x90>
 6de:	fe 2b       	or	r31, r30
 6e0:	88 0f       	add	r24, r24
 6e2:	91 1d       	adc	r25, r1
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret

000006ec <_exit>:
 6ec:	f8 94       	cli

000006ee <__stop_program>:
 6ee:	ff cf       	rjmp	.-2      	; 0x6ee <__stop_program>
